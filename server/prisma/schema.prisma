//Whenever you update your Prisma schema,run  prisma db push command to create new indexes and regenerate Prisma Client.

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//@id-primary key. default.. autogenerates a mongodb id and since it uses_id you need to map it to the id schema part @db.Objid is the type
model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String          @unique
  password        String
  mobile          String
  avatar          String?
  role            Role            @default(USER)
  company         String?
  properties      Property[]
  savedProperties SavedProperty[]
  chats           Chat[] @relation(fields: [chatIds], references: [id]) //To have many to many relation in mongodb we need to add id to the model and then add the relation to the other model
  chatIds String[] @db.ObjectId // This field stores the IDs of the chats that the user is part of
  createdAt       DateTime        @default(now())
}

model Chat {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  participants User[]  @relation(fields: [participantsIds], references: [id])
  participantsIds String[] @db.ObjectId
  messages Message[]
  lastMessage   String?
  unreadCounts  Json      @default("{}") // Stores unread messages per user {user1:0 ,user2:1}
  createdAt DateTime @default(now())

}

model Message {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  chatId  String @db.ObjectId
  chat Chat @relation(fields: [chatId], references: [id])
  senderId  String @db.ObjectId // Instead of storing sender aswell we can just select the sender details like name, avatar etc from the user model
  content String
  createdAt DateTime @default(now())
}


model Property {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  price           Float
  address        String?
  city            String
  governate         Governate
  image           String[]
  bedrooms        Int
  bathrooms       Int
  area            Float
  amenities       String[]
  type            Type
  property_type   PropertyType
  utilities       Utilities
  furnishing      Furnishing?
  userId          String          @db.ObjectId
  //Here, userId is the field that references the corresponding User record and id .
  user            User            @relation(fields: [userId], references: [id]) //[userId] means the field in this model that references the User model. [id] means the field in the User model that is referenced (so userId here is referencing  id field of User ).
  //we write savedproperty[] to create the many to many relatinship and reference the property in saved property
  savedProperties SavedProperty[]
  createdAt       DateTime        @default(now())
}

model SavedProperty {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  propertyId String   @db.ObjectId
  property   Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])  // Composite unique constraint the same user can't save the same property multiple times and Multiple users can save the same property. SO it mean the combinatin of both so [user1, propA] must be unique. so a user could save different props. [user1, propB] as the combination must be unique
}

//id |	userID(Unique)|	propertyId (Unique)
//1  |	User1	        | PropertyA
//2  |	User2	        | PropertyB
//Here the same user would not be allowed to save different properties as the userId must be unique in that record/col. same goes for property. a property could only be saved once.

enum Role {
  USER
  AGENT
}

enum Type {
  Rent
  Sell
}

enum PropertyType {
  Studio
  Apartment
  Villa
  Condo
  Penthouse
}

enum Utilities {
  Inclusive
  Exclusive
}

enum Furnishing {
  Unfurnished
  Semifurnished
  Furnished
}
enum Governate {
  Capital_Governorate
  Northern_Governorate
  Southern_Governorate 
  Muharraq_Governorate
}
